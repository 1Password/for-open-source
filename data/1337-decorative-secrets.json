{
	"account": "enorganic.1password.com",
	"project": {
		"name": "decorative-secrets",
		"description": "decorative-secrets is a library designed to facilitate developing python libraries with easy/seamless secrets integration. For example, when run on Databricks—I commonly need/want to use Databricks secrets to hold credentials. I don’t, however, necessarily want all developers working on said library to have Databricks access, but they should be able to develop and test functions seamlessly. The following example employs Databricks secrets when run on Databricks, to avoid unnecessary HTTP requests and rate limit problems, uses 1Password when developing locally, and environment variables when run in CI/CD (Github actions, usually, in my case).\n\nHaving a teams 1Password account would be ideal for this project, primarily for the increased rate limit, as running these tests a few times in one day kills my family account service ID rate limit :-).\n\nThanks for your consideration!\n\nfrom functools import cache\nfrom my_app_sdk.client import Client\nfrom decorative_secrets.environment import apply_environment_arguments\nfrom decorative_secrets.onepassword import apply_onepassword_arguments\nfrom decorative_secrets.databricks import apply_databricks_secrets_arguments\n\n@cache\n@apply_environment_arguments(\n  client_id=\"client_id_environment_variable\",\n  client_secret=\"client_secret_environment_variable\",\n)\n@apply_databricks_secrets_arguments(\n  client_id=\"client_id_databricks_secret\",\n  client_secret=\"client_secret_databricks_secret\",\n)\n@apply_onepassword_arguments(\n  client_id=\"client_id_onepassword\",\n  client_secret=\"client_secret_onepassword\",\n)\ndef get_client(\n    client_id: str | None = None,\n    client_secret: str = None,\n    client_id_databricks_secret: tuple[str, str] | None = None,\n    client_secret_databricks_secret: tuple[str, str] | None = None,\n    client_id_onepassword: str | None = None,\n    client_secret_onepassword: str | None = None,\n    client_id_environment_variable: str | None = None,\n    client_secret_environment_variable: str | None = None,\n) -\u003e Client:\n    \"\"\"\n    This function is an example use of `decorative-secrets`.\n    The returned client will authenticate with explicitly provided\n    credentials if a `client_id` and `client_secret` are passed as arguments,\n    otherwise, the same function call will first check to see if\n    environment variables can be used, then will check to see if databricks\n    secrets can be used, and lastly will check to see if 1password\n    stored credentials can be obtained. In all cases where\n    an argument other than `None` is passed, errors will be caught and\n    accumulated for that parameter, but only raised if none of the\n    successive mechanisms for retrieving a value for the parameter are\n    successful.\n\n    Parameters:\n        client_id: An eplicitly passed OAuth 2 client ID\n        client_secret: An explicitly passed OAuth 2 client secret\n        client_id_databricks_secret: A databricks secrets scope and key\n        from which to retrieve the client ID, if executed in a Databricks\n        Runtime environment\n        client_secret_databricks_secret: A databricks secrets scope and key\n        from which to retrieve the client secret, if executed in a Databricks\n        Runtime environment\n        client_id_onepassword: A onepassword reference from which to retrieve\n        the client ID. Note: the user will be prompted to login, if they have\n        not already done so, unless a `OP_SERVICE_ACCOUNT_TOKEN` environment\n        variable has been set, and/or both both an `OP_CONNECT_HOST` and\n        `OP_CONNECT_TOKEN` environment variable have been set.\n        client_secret_onepassword: A onepassword reference from which to retrieve\n        the client secret. Note: the user will be prompted to login, if they have\n        not already done so, unless a `OP_SERVICE_ACCOUNT_TOKEN` environment\n        variable has been set, and/or both both an `OP_CONNECT_HOST` and\n        `OP_CONNECT_TOKEN` environment variable have been set.\n        client_id_environment_variable: An environment variable from which\n        the client ID may be retrieved\n        client_secret_environment_variable: An environment variable from which\n        the client secret may be retrieved\n    \"\"\"\n    return Client(\n        oauth2_client_id=client_id,\n        oauth2_client_secret=client_secret\n    )\n\n\n# Initialize an OAuth 2 Client\nclient: Client = get_client(\n  client_id_databricks_secret=(\"client-scope\", \"client-id-key\"),\n  client_secret_databricks_secret=(\"client-scope\", \"client-secret-key\"),\n  client_id_onepassword=\"op://Vault Name/Client ID Item Name/username\",\n  client_secret_onepassword=\"op://Vault Name/Client Secret Item Name/credential\",\n  client_id_environment_variable=\"MY_APP_CLIENT_ID\",\n  client_secret_environment_variable=\"MY_APP_CLIENT_SECRET\",\n)",
		"contributors": 3,
		"home_url": "https://decorative-secrets.enorganic.org",
		"repo_url": "https://github.com/enorganic/decorative-secrets/",
		"license_type": "MIT",
		"license_url": "https://github.com/enorganic/decorative-secrets/license/",
		"is_event": false,
		"is_team": true
	},
	"applicant": {
		"name": "David Isaac Belais",
		"email": "david@belais.me",
		"role": "Founder or Owner",
		"id": 204975
	},
	"can_contact": true,
	"approver_id": 175932,
	"issue_number": 1337,
	"created_at": "2025-10-13T23:56:26Z"
}